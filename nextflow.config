params {
    /*
     * Set up.
     */

    INPUTS_CSV = "${launchDir}/alignment.csv"

    FASTQ_DIR = "${launchDir}/fastq"

    /*
     * Reference files.
     */

    ASSEMBLY = "hg38"

    REFERENCE_ROOT = "/mnt/scratcha/bioinformatics/rosenfeld_references"

    REFERENCE_FASTA = "${REFERENCE_ROOT}/${ASSEMBLY}/fasta/${ASSEMBLY}.fa"
    CANONICAL_CHROMOSOMES = "${REFERENCE_ROOT}/${ASSEMBLY}/fasta/${ASSEMBLY}.canonical"
    BWAMEM2_INDEX = "${REFERENCE_ROOT}/${ASSEMBLY}/bwamem2-2.2.1/${ASSEMBLY}"

    /*
     * Trimming.
     */

    // Whether to trim or not.
    TRIM_FASTQ = false

    // Permitted range for read lengths as a fraction of the original read length. (Min: 0 and Max: 100).
    TRIM_MINIMUM_FRACTION_READ = 10

    // Quality Threshold for Trimming (Min: 0 and Max: 50).
    TRIM_QUALITY_THRESHOLD = 5

    /*
     * Alignment.
     */

    MARK_DUPLICATES = true

    // The number of reads in each chunk for alignment
    CHUNK_SIZE = 100000

    /*
     * Collapsing.
     */

    CONNOR_COLLAPSING = false

    CONNOR_MIN_FAMILY_SIZE_THRESHOLD = 2

    CONNOR_CONSENSUS_FREQ_THRESHOLD = 0.9

    CONNOR_UMT_LENGTH = 6

    /*
     * GATK base quality score recalibration
     */

    GATK_BQSR = false

    GATK_KNOWN_SITES = "${REFERENCE_ROOT}/${ASSEMBLY}/dbsnp/${ASSEMBLY}.snps.vcf.gz"

    /*
     * Filtering
     */

    FILTER = false

    MINIMUM_MAPPING_QUALITY = 5

    // Filtering reads if they are
    // 1) unmapped (4)
    // 2) multi-mapping (256 primary alignment)
    // 3) flagged as PCR or optical duplicates (1024)
    // 4) are chimeric and flagged as supplementary alignment (2048)
    SAM_EXCLUDE_FLAGS = 4 | 256 | 1024 | 2048

    BLACKLIST = "${REFERENCE_ROOT}/${ASSEMBLY}/blacklist/${ASSEMBLY}.blacklist.bed"

    /*
     * Read selection.
     */

    // What type of read selection? Can be "BaseQuailty", "Length", "None".
    READ_SELECTION = 'None'

    TEMPLATE_MINIMUM = 90

    TEMPLATE_MAXIMUM = 150

    BASE_QUALITY_MEAN_MINIMUM = 30

    BASE_QUALITY_FIRST_BASES = 10

    BASE_QUALITY_LAST_BASES = 10

    /*
     * QC
     */

    FASTQC = false

    /*
     * Ichor CNA.
     */

    ICHORCNA = false

    // The exact version if ichorCNA in the container. If it is updated, also update it here.
    ICHORCNA_VERSION = '0.3.2-1'

    // The path to the ICHOR reference files within the container.
    ICHORCNA_PACKAGE_DATA_DIR = "/opt/conda/envs/nrlab_tap/share/r-ichorcna-${ICHORCNA_VERSION}/extdata"

    // Set window size to compute coverage (default 1000 kb).
    READ_COUNTER_BIN_SIZE = 1000000L

    // One of 'no_control', 'rubicon', 'xths', 'custom'.
    ICHORCNA_PANEL = 'rubicon'

    /*
    ICHORCNA_NORMAL_PANEL = 'HD_ULP_PoN_1Mb_median_normAutosome_mapScoreFiltered_median.rds'

    ICHORCNA_GC_WIGGLE = 'gc_hg19_1000kb.wig'

    ICHORCNA_MAP_WIGGLE = 'map_hg19_1000kb.wig'

    ICHORCNA_CENTROMERE = 'GRCh37.p13_centromere_UCSC-gapTable.txt'
    */

    ICHORCNA_CHROMOSOMES = /c(1:22, \"X\")/

    ICHORCNA_EXONS = 'NULL'

    ICHORCNA_MINIMUM_MAP_SCORE = 0.75

    ICHORCNA_FRAC_READS_IN_CHR_Y_FOR_MALE = 0.002

    // Chromosomes used for training ichorCNA parameters, e.g. tumor fraction.
    ICHORCNA_TRAINING_CHROMOSOMES = 'c(1:22)'

    // Non-tumor fraction parameter restart values; higher values should be included for cfDNA
    ICHORCNA_NORMAL = 'c(0.95,0.99,0.995,0.999)'

    // Ploidy parameter restart values
    ICHORCNA_PLOIDY = 'c(2)'

    ICHORCNA_ESTIMATE_NORMAL = true

    ICHORCNA_ESTIMATE_PLOIDY = true

    ICHORCNA_ESTIMATE_CLONALITY = true

    // States to use for subclonal CN
    ICHORCNA_SUBCLONAL_STATES = 'c()'

    // Maximum copy number to use
    ICHORCNA_MAXIMUM_COPYNUMBER = 3

    // TRUE/FALSE to include homozygous deletion state
    ICHORCNA_INCLUDE_HOMD = false

    // Exclude solutions if total length of subclonal CNAs > this fraction of the genome
    ICHOR_MAXIMUM_FRAC_GENOME_SUBCLONE = 0.5

    // Exclude solutions if total length of subclonal CNAs > this fraction of total CNA length
    ICHORCNA_MAXIMUM_FRAC_CNA_SUBCLONE = 0.7

    // control segmentation - higher (e.g. 0.9999999) leads to higher specificity and fewer segments
    // lower (e.g. 0.99) leads to higher sensitivity and more segments
    ICHORCNA_TXN_E = 0.9999

    // control segmentation - higher (e.g. 10000000) leads to higher specificity and fewer segments
    // lower (e.g. 100) leads to higher sensitivity and more segments
    ICHORCNA_TXN_STRENGTH = 10000

    ICHORCNA_PLOT_FILE_TYPE = 'pdf'

    ICHORCNA_PLOT_Y_LIMITS = 'c(-4,4)'


    /*
     * Internal configuration.
     * Don't change these unless you're developing the pipeline.
     */

    JAVA8 = '/usr/lib/jvm/jre-1.8.0/bin/java'
    JAVA11 = '/usr/lib/jvm/jre-11/bin/java'

    GATK_JAR = '/opt/conda/envs/nrlab_tap/opt/gatk-3.8/GenomeAnalysisTK.jar'
}



manifest {
    mainScript = 'tap.nf'
    nextflowVersion = '>=20.0.0'
    version = '2.0.0'
    recurseSubmodules = true
}

executor {
    $slurm {
        queueSize = 150
        pollInterval = '30sec'
        queue = 'general'
        clusterOptions = "--nodes=1 --open-mode=truncate"
    }
}

singularity.enabled = true
singularity.autoMounts = true
singularity.runOptions = "-B '${projectDir}'"

process {
    container = 'nrlabcruk/nrlabtap'

    errorStrategy = {
        task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish'
    }

    cpus = 1
    memory = '1g'
    time = '15m'

    withLabel:picard {
       cpus = 1
       memory = { 4.GB * 2 ** (task.attempt - 1) } // So 4, 8, 16 etc
       time = { 4.hour * task.attempt }
       maxRetries = 2
    }

    withLabel:gatk {
       cpus = 1
       memory = { 4.GB * 2 ** (task.attempt - 1) } // So 4, 8, 16 etc
       time = { 2.hour * task.attempt }
       maxRetries = 2
    }
}

profiles {
    standard {
        // The default is, on request, the same as the "slurm" profile.
        params.MAX_CORES = 16
        process.executor = 'slurm'
        executor.$local.cpus = 4
        executor.$local.memory = '8g'
    }

    slurm {
        params.MAX_CORES = 16
        process.executor = 'slurm'
        executor.$local.cpus = 4
        executor.$local.memory = '8g'
    }

    desktop {
        params.MAX_CORES = 6
        process.executor = 'local'
        executor.$local.cpus = params.MAX_CORES
        executor.$local.memory = '20g'
    }

    bigserver {
        params.MAX_CORES = 28
        process.executor = 'local'
        executor.$local.cpus = params.MAX_CORES
        executor.$local.memory = '180g'
    }
}

env {
    TAP_HOME = projectDir
}

timeline {
    enabled = true
    file = "work/execution_timeline.html"
}
report {
    enabled = true
    file = "work/execution_report.html"
}
