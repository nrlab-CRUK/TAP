params {
    /*
     * Set up.
     */

    FASTQ_DIR = "${launchDir}/fastq"

    BAM_DIR = "${launchDir}/bam"

    /*
     * Reference files.
     */

    SPECIES = "homo_sapiens"
    ASSEMBLY = "GRCh38"
    ASSEMBLY_PREFIX = "hsa.${ASSEMBLY}"

    REFERENCE_ROOT = "/mnt/scratchb/bioinformatics/reference_data/reference_genomes"

    REFERENCE_FASTA = "${REFERENCE_ROOT}/${SPECIES}/${ASSEMBLY}/fasta/${ASSEMBLY_PREFIX}.fa"
    BWAMEM2_INDEX = "${REFERENCE_ROOT}/${SPECIES}/${ASSEMBLY}/bwamem2-2.2.1/${ASSEMBLY_PREFIX}"

    /*
     * Trimming.
     */

    // Whether to trim or not.
    TRIM_FASTQ = true

    // Permitted range for read lengths as a fraction of the original read length. (Min: 0 and Max: 100).
    TRIM_MINIMUM_FRACTION_READ = 10

    // Quality Threshold for Trimming (Min: 0 and Max: 50).
    TRIM_QUALITY_THRESHOLD = 5

    /*
     * Alignment.
     */

    MARK_DUPLICATES = false

    // The number of reads in each chunk for alignment
    CHUNK_SIZE = 100000

    /*
     * Collapsing.
     */

    CONNOR_COLLAPSING = true

    CONNOR_MIN_FAMILY_SIZE_THRESHOLD = 2

    CONNOR_CONSENSUS_FREQ_THRESHOLD = 0.9

    CONNOR_UMT_LENGTH = 10

    /*
     * Indel Realignment
     */

    GATK_KNOWN_SITES = [ ]

    GATK_DBSNP = null

    GATK_USE_INDEL_QUALITIES = false

    /*
     * Filtering.
     */

    BLACKLIST = null

    MINIMUM_MAPPING_QUALITY = 5

    // Filtering reads if they are
    // 1) unmapped (4)
    // 2) multi-mapping (256 primary alignment)
    // 3) flagged as PCR or optical duplicates (1024)
    // 4) are chimeric and flagged as supplementary alignment (2048)
    SAM_EXCLUDE_FLAGS = 4 | 256 | 1024 | 2048

    /*
     * Internal configuration.
     * Don't change these unless you're developing the pipeline.
     */

    JAVA8 = '/usr/lib/jvm/jre-1.8.0/bin/java'
    JAVA11 = '/usr/lib/jvm/jre-11/bin/java'

    GATK_JAR = '/opt/conda/envs/nrlab_tap/opt/gatk-3.8/GenomeAnalysisTK.jar'
}



manifest {
    mainScript = 'tap.nf'
    nextflowVersion = '>=20.0.0'
    version = '2.0.0'
    recurseSubmodules = true
}

executor {
    $slurm {
        queueSize = 150
        pollInterval = '30sec'
        queue = 'general'
        clusterOptions = "--nodes=1 --open-mode=truncate"
    }
}

singularity.enabled = true
singularity.autoMounts = true
singularity.runOptions = "-B '${projectDir}'"

process {
    container = 'nrlabcruk/nrlabtap'

    errorStrategy = {
        task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish'
    }

    cpus = 1
    memory = '1g'
    time = '15m'

    withLabel:picard {
       cpus = 1
       memory = { 4.GB * 2 ** (task.attempt - 1) } // So 4, 8, 16 etc
       time = { 4.hour * task.attempt }
       maxRetries = 2
    }

    withLabel:gatk {
       cpus = 1
       memory = { 4.GB * 2 ** (task.attempt - 1) } // So 4, 8, 16 etc
       time = { 2.hour * task.attempt }
       maxRetries = 2
    }
}

profiles {
    slurm {
        // The default is, on request, the same as the "slurm" profile.
        params.MAX_CORES = 16
        process.executor = 'slurm'
        executor.$local.cpus = 4
        executor.$local.memory = '8g'
    }

    slurm {
        params.MAX_CORES = 16
        process.executor = 'slurm'
        executor.$local.cpus = 4
        executor.$local.memory = '8g'
    }

    desktop {
        params.MAX_CORES = 6
        process.executor = 'local'
        executor.$local.cpus = params.MAX_CORES
        executor.$local.memory = '20g'
    }

    bigserver {
        params.MAX_CORES = 28
        process.executor = 'local'
        executor.$local.cpus = params.MAX_CORES
        executor.$local.memory = '180g'
    }
}

env {
    TAP_HOME = projectDir
}

timeline {
    enabled = true
    file = "work/execution_timeline.html"
}
report {
    enabled = true
    file = "work/execution_report.html"
}
