params
{
    /*
     * Set up.
     */

    INPUTS_CSV = "${launchDir}/alignment.csv"

    FASTQ_DIR = "${launchDir}/fastq"

    ALIGNED_DIR = "${launchDir}/processed"

    REPORTS_DIR = "${launchDir}/reports"

    /*
     * Execution control. Turns on and off the removal of intermediate inputs on some
     * processes to save disk space. It is recommended to leave this off so that Nextflow
     * operates normally and can be resumed. If there is a particularly large data set
     * being processed, this can be turned on to remove inputs when they are done with,
     * at the cost of a failure requiring the pipeline to be restarted.
     */

    EAGER_CLEANUP = false

    /*
     * Choice of aligner. Can be "bwamem2", "bowtie2" or "bwameth".
     */

    ALIGNER = 'bwamem2'

    /*
     * Aligner specific additional options.
     */

    BWAMEM2_OPTIONS = ''
    BOWTIE2_OPTIONS = ''
    BWAMETH_OPTIONS = ''

    /*
     * Reference files.
     */

    ASSEMBLY = "hg38"

    REFERENCE_ROOT = "/mnt/scratcha/nrlab/TAP_resources/rosenfeld_references"

    // You can set REFERENCE_FASTA if you want a file outside of the standard structure.
    REFERENCE_FASTA = null

    // You can set BWAMEM2_INDEX if you want a directory outside of the standard structure.
    BWAMEM2_INDEX = null

    // You can set BOWTIE2_INDEX if you want a directory outside of the standard structure.
    BOWTIE2_INDEX = null

    // You can set BWAMETH_INDEX if you want a directory outside of the standard structure.
    BWAMETH_INDEX = null

    /*
     * Trimming.
     */

    // Whether to trim or not.
    TRIM_FASTQ = false

    // Permitted range for read lengths as a fraction of the original read length. (Min: 0 and Max: 100).
    TRIM_MINIMUM_FRACTION_READ = 10

    // Quality Threshold for Trimming (Min: 0 and Max: 50).
    TRIM_QUALITY_THRESHOLD = 5

    // Use UMI reads to allow read collapsing for Connor.
    CONNOR_COLLAPSING = false

    /*
     * Alignment.
     */

    MARK_DUPLICATES = true

    // The number of reads in each chunk for alignment
    CHUNK_SIZE = 10000000

    /*
     * GATK base quality score recalibration
     */

    GATK_BQSR = false

    // You can set GATK_KNOWN_SITES if you want a file outside of the standard structure.
    // It can be a single path or a list of paths (in square brackets).
    GATK_KNOWN_SITES = null

    /*
     * QC
     */

    FASTQC = false

    /*
     * Id extraction from the driver CSV file.
     */

    // A list of the column headers that make up the unit id for the pipeline.
    // These are used in order.
    UNIT_ID_PARTS = [ 'SLXId', 'Barcode', 'PlatformModel', 'Flowcell', 'Lane' ]

    // The character or string to put between the unit id values.
    UNIT_ID_SEPARATOR = '.'

    // A list of the column headers that make up the sample id for the pipeline.
    // These are used in order.
    SAMPLE_ID_PARTS = [ 'SLXId', 'Barcode', 'PlatformModel' ]

    // The character or string to put between the sample id values.
    SAMPLE_ID_SEPARATOR = '.'

    /*
     * Database connection settings. These shouldn't be changed except for
     * when doing development work.
     */

    DB_HOST = '10.20.14.24'

    DB_PORT = 3306

    DB_NAME = 'rosenfeld'

    DB_USER = 'mysql'

    DB_PASS = null
}



manifest
{
    mainScript = 'tap.nf'
    nextflowVersion = '>=23.9.0'
    version = '2.2.1'
    recurseSubmodules = true
    author = 'Richard Bowers, Matthew Eldridge'
    homePage = 'https://github.com/nrlab-CRUK/TAP'
    name = 'Rosenfeld Trim and Align Pipeline'
    description = "Sequence data trimming and alignment pipeline."
}

executor
{
    $slurm
    {
        queueSize = 150
        pollInterval = '30sec'
        queue = 'general'
        clusterOptions = "--nodes=1 --open-mode=truncate"
    }
}

singularity.enabled = true
singularity.autoMounts = true
singularity.runOptions = "--no-home -B '${projectDir}'"

clean = true

process
{
    // container = "nrlabcruk/nrlabtap:${manifest.version}"
    container = "${projectDir}/container/nrlabtap-${manifest.version}.sif"

    errorStrategy =
    {
        task.exitStatus in [ 104, 134, 137..140 ].flatten() ? 'retry' : 'finish'
    }

    cpus = 1
    memory = 1.GB
    time = 1.hour

    withLabel:picardLarge
    {
       memory = { 8.GB * 2 ** (task.attempt - 1) } // So 8, 16, 32
       time = { 8.hour * task.attempt }
       maxRetries = 2
    }

    withLabel:picardSmall
    {
       memory = { 256.MB * 2 ** (task.attempt - 1) }
       time = { 2.hour * task.attempt }
       maxRetries = 2
    }

    withLabel:gatk
    {
       memory = { 4.GB * 2 ** (task.attempt - 1) } // 4, 8, 16
       time = { 4.hour * task.attempt }
       maxRetries = 2
    }
}

profiles
{
    standard
    {
        // The default is, on request, the same as the "slurm" profile.

        params.REFERENCE_ROOT = '/mnt/scratcha/nrlab/TAP_resources/rosenfeld_references'

        process.container = "/mnt/scratcha/nrlab/TAP_resources/rosenfeld_containers/nrlabtap-${manifest.version}.sif"

        process.executor = 'slurm'
        process.queue = 'general'
        executor
        {
            queueSize = 100
            pollInterval = 30.sec
            jobName = { "'$task.name'" }
        }
    }

    slurm
    {
        params.REFERENCE_ROOT = '/mnt/scratcha/nrlab/TAP_resources/rosenfeld_references'

        process.container = "/mnt/scratcha/nrlab/TAP_resources/rosenfeld_containers/nrlabtap-${manifest.version}.sif"

        process.executor = 'slurm'
        process.queue = 'general'
        executor
        {
            queueSize = 100
            pollInterval = 30.sec
            jobName = { "'$task.name'" }
        }
    }

    general
    {
        params.REFERENCE_ROOT = '/mnt/scratcha/nrlab/TAP_resources/rosenfeld_references'

        process.container = "/mnt/scratcha/nrlab/TAP_resources/rosenfeld_containers/nrlabtap-${manifest.version}.sif"

        process.executor = 'slurm'
        process.queue = 'general'
        executor
        {
            queueSize = 100
            pollInterval = 30.sec
            jobName = { "'$task.name'" }
        }
    }

    epyc
    {
        params.REFERENCE_ROOT = '/mnt/scratchc/bioinformatics/rosenfeld_references'

        process.container = "/mnt/scratchc/bioinformatics/rosenfeld_containers/nrlabtap-${manifest.version}.sif"

        process.executor = 'slurm'
        process.queue = 'epyc'
        executor
        {
            queueSize = 100
            pollInterval = 30.sec
            jobName = { "'$task.name'" }
        }
    }

    bigserver
    {
        process.container = "${projectDir}/container/nrlabtap-${manifest.version}.sif"

        process.executor = 'local'
        executor
        {
            cpus = 28
            memory = 180.GB
        }
    }

    bioinf
    {
        params.REFERENCE_ROOT = '/ssd/reference_data/rosenfeld_references'

        process.container = "${projectDir}/container/nrlabtap-${manifest.version}.sif"

        process.executor = 'local'
        executor
        {
            cpus = 28
            memory = 280.GB
        }
    }
}

timeline
{
    enabled = false
    file = "${launchDir}/work/execution_timeline.html"
}
report
{
    enabled = false
    file = "${launchDir}/work/execution_report.html"
}
